# 개발자가 되기 위한 마음 가짐

## 목차

## 개발자란 무슨 일을 하는 사람일까?
## 개발의 언어가 중요한가요? 어떤 언어를 선택하는 것이 좋은가요?
## 개발에는 정답이 정해져 있는가?
## 웹 개발자의 역할

### 1. 개발자란 무슨 일을 하는 사람일까?
    개발자는 문제를 해결하는 사람
    개발자는 웹 개발자, 게임 개발자, 응용 소프트웨어 개발자, AI 개발자 등 여러 직군이 있다.
    개발은 쉽게 말해서 글을 쓰는 것과 비슷하다. 다만 컴퓨터가 이해할 수 있는 언어로 글을 작성해야 한다.
    개발자가 어떤 목적을 정하고 개발을 하느냐에 무슨 개발자가 될 수 있느냐가 나눠진다.

### 2. 개발의 언어가 중요한가요? 어떤 언어를 선택하는 것이 좋은가요?
    개발에 `언어`는 중요하지 않다.
    언어마다 특성이 있고 언어보다 소프트웨어를 구현할 수 있는 사고방식과 머리 속에 그릴 수 있는 능력이 중요하다.

### 3. 개발에는 정답이 정해져 있는가?
    개발이라는 것에는 `정해진 정답이 없다`
    학교에서 공부할 때와 다르게 코드에는 정답이 없다.

### 4. 웹 개발자의 역할
    웹 개발자는 이름 그대로 웹 사이트를 만드는 개발자이다.
    웹 디자이너, 웹 기획자(웹 디자인, UX/UI 기획) -> 웹 프론트(웹 사이트) -> 웹 백엔드(서버)

---------------------------------

# 개발을 준비하기 위한 사전 지식

## 목차

## 컴퓨터와 친구가 되자
## 우리의 컴퓨터의 중요한 부품
## 컴퓨터 프로그래밍이란?

### 1. 컴퓨터와 친구가 되자
    - 하드웨어 : 컴퓨터의 본체, 모니터, 키보드, 마우스 등등 형태가 있는 것은 모두 하드웨어라는 용어를 사용
    - 소프트웨어 : 컴퓨터가 동작하기 위한 프로그램 등과 데이터

### 2. 우리의 컴퓨터의 중요한 부품
    - CPU : Central Processing Unit의 줄임말
        컴퓨터의 심장이라고 볼 수 있다.
        키보드나 마우스 등의 정보를 받아 처리 후 모니터로 출력하는 곳
    - 메모리 : 흔히 RAM(Random Access Memory)이라고 불리는 것이 메모리이다.
        컴퓨터의 작업대라고 볼 수 있다.
        작업 중인 프로그램이나 처리하고 있는 데이터를 나열한 곳
    - 하드 디스크 : 프로그램이나 데이터를 저장하기 위한 저장소
        RAM가 다르게 `파일` 형태로 데이터를 저장한다.

### 3. 컴퓨터 프로그래밍이란?
    컴퓨터는 명령한 내용까지만 처리를 한다.
    애매한 정보가 아닌 정확한 정보를 전달해야 한다.
    컴퓨터는 정해진 명령을 순서대로 절차적으로 처리한다.

----------------------------------

# 웹의 발전

## 목차

## 인터넷은?
## 웹 서비스의 발전
## 웹 어플리케이션 아키텍처

### 1. 인터넷은?
    인터넷은 처음 1960년 군사적인 목적을 가지고 개발되었다.
    이후 해저 광케이블을 설치(전 세계 인터넷의 해외 연경망 트래픽의 약 90% 이상 사용)
    WWW(World Wide Web) : 1990년 팀 버너스 리가 개발하였다.
    웹 서버와 웹 브라우저가 개발하고 통신의 규칙과 화면을 구성 할수 있는 프로그래밍 언어를 개발했다.

### 2. 웹 서비스의 발전
    - 1세대 웹 : 정적인 웹사이트
        단순한 정보 제공을 목적으로 발전되었다.
    - 2세대 웹 : 동적인 웹사이트
        넷스케이프사에서 개발한 javascript를 사용했다.
        여기까지는 프론트와 백엔드의 개념이 없었다.
    - 3세대 웹 : SPA(Single Page Application)
        SPA에 등자으로 페이지 전환 없이 사용자가 앱을 사용하는 느낌을 받는 UX 향상의 효과를 주었다.
        하나의 페이지에서 변경이 필요한 부분만 내용을 변경해준다.
        프론트와 백엔드 개발자의 개념이 생겨 업무적으로 구분을 시작하였다.

### 3. 웹 어플리케이션 아키텍처
    1. MPA (Multi Page Application) : 정적 웹사이트가 여러개 있고 페이지의 링크로 이동하여 보여주는 형태
    2. SPA (Single Page Application) : 페이지가 한개이고 하나의 페이지 에서 링크로 이동하는게 아닌 javascript를 통해 내용을 변경하는 형태
    3. CSR (Client Side Application) : SPA를 브라우저에 그려주는 작업 중 최초 1번 전체 페이지를 로딩 렌더링을 해주는 방식
        전체 페이지를 로딩하기에 최초 진입 시 느리게 페이지가 보인다.
    4. SSR (Server Side Application) : SPA를 브라우저에서 그려주는 작업 중 서버에서 페이지를 완성시켜 브라우저에게 제공하는 현태
    5. Next (CSR + SSR)
